{
  "hash": "df87a95e09e87fbd08899826cfb7e2ec",
  "result": {
    "markdown": "---\ntitle: \"An introduction to Marvin and Ibis\"\nauthor: \"Cody Peterson\"\ndate: \"2023-10-12\"\nexecute: \n  warning: false\ncategories:\n    - \"LLMs and data\"\n---\n\n## Introduction\n\nIn this \"LLMs and data\" series, we'll explore how to apply large-language models (LLMs) to data analytics. We'll walk through the steps to build Ibis Birdbrain.\n\nThroughout the series, we'll be using [Marvin](https://www.askmarvin.ai/welcome/overview/) and [Ibis](https://ibis-project.org). A brief introduction to each is provided below.\n\n## Marvin\n\n[Marvin](https://www.askmarvin.ai/welcome/overview/) is an AI engineering framework that makes it easy to build up to an interactive conversational application.\n\nMarvin makes calls to an AI platform. You typically use an API key set as an environment variable -- in this case, we'll load a `.env` file that contians secrets for the AI platform that Marvin will use. We also set the large language model model.\n\n::: {#84260ad9 .cell execution_count=1}\n``` {.python .cell-code}\nimport marvin  # <1>\n\nfrom rich import print  # <1>\nfrom time import sleep  # <1>\nfrom dotenv import load_dotenv  # <1>\n\nload_dotenv()  # <2>\n\n# increase accuracy\nmarvin.settings.llm_model = \"openai/gpt-4\"  # <3>\n# decrease cost\n# marvin.settings.llm_model = \"openai/gpt-3.5-turbo\"  # <3>\n\ntest_str = \"working with data and LLMs on 18+ data platforms is easy!\"  # <4>\ntest_str\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n'working with data and LLMs on 18+ data platforms is easy!'\n```\n:::\n:::\n\n\n1. Import the libraries we need.\n2. Load the environment variable to setup Marvin to call our OpenAI account.\n3. Configure the LLM model to use.\n4. Some text to test on\n\n### Functions\n\nAI functions are one of the building blocks in Marvin and allow yout to specify a typedpython function with no code -- only a docstring -- to achieve a wide variety of tasks.\n\nWe'll demonstrate this with an AI function that trnaslates text:\n\n::: {#932034e8 .cell execution_count=2}\n``` {.python .cell-code}\n@marvin.ai_fn\ndef translate(text: str, from_: str = \"English\", to: str = \"Spanish\") -> str:\n    \"\"\"translates the text\"\"\"\n\ntranslate(test_str)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'¡Trabajar con datos y LLM en más de 18 plataformas de datos es fácil!'\n```\n:::\n:::\n\n\n::: {#b1ad3e9a .cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\nsleep(1) # <1>\n```\n:::\n\n\n1. Avoid rate-limiting by waiting.\n\n::: {#403c9de5 .cell execution_count=4}\n``` {.python .cell-code}\ntranslate(translate(test_str), from_=\"Spanish\", to=\"English\")\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'Working with data and LLMs on more than 18 data platforms is easy!'\n```\n:::\n:::\n\n\n::: {#18971bec .cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\"}\nsleep(3) # <1>\n```\n:::\n\n\n1. Avoid rate-limiting by waiting.\n\n### Models\n\nAI models are another building block for generatingpython classes from input text. It's a great way to build structured data from unstructured data that can be customized for your needs. \n\nWe'll demosntrate this with an AI model that translates text:\n\n::: {#a75bcb29 .cell execution_count=6}\n``` {.python .cell-code}\nfrom pydantic import BaseModel, Field\n\n# decrease cost\nmarvin.settings.llm_model = \"openai/gpt-3.5-turbo\"\n\n@marvin.ai_model\nclass ExtractParts(BaseModel):\n    \"\"\"Extracts parts of a sentence\"\"\"\n    subject: str = Field(..., description=\"The subject of the sentence.\")\n    predicate: str = Field(..., description=\"The predicate of the sentence.\")\n    objects: list[str] = Field(..., description=\"The objects of the sentence.\")\n    modifiers: list[str] = Field(..., description=\"The modifiers of the sentence.\")\n\nExtractParts(test_str)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nExtractParts(subject='working with data and LLMs', predicate='is', objects=['easy'], modifiers=['on 18+ data platforms'])\n```\n:::\n:::\n\n\n::: {#eec7d60a .cell execution_count=7}\n``` {.python .cell-code code-fold=\"true\"}\nsleep(1) # <1>\n```\n:::\n\n\n1. Avoid rate-limiting by waiting.\n\n### Classifiers\n\nAI classifiers are another building block for generatingpython classes from input text. It's the most efficient (time and cost) method for applying LLMs as it only results in a single output token, selecting an output in a specified Enum.\n\nWe'll demonstrate this by classifying the language of some text:\n\n::: {#0ff5e445 .cell execution_count=8}\n``` {.python .cell-code}\nfrom enum import Enum\n\n# increase accuracy\nmarvin.settings.llm_model = \"openai/gpt-4\"\n\n@marvin.ai_classifier\nclass IdentifyLanguage(Enum):\n    \"\"\"Identifies the language of the text\"\"\"\n\n    english = \"English\"\n    spanish = \"Spanish\"\n\n\nIdentifyLanguage(test_str).value\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'English'\n```\n:::\n:::\n\n\n::: {#165af08a .cell execution_count=9}\n``` {.python .cell-code code-fold=\"true\"}\nsleep(1) # <1>\n```\n:::\n\n\n1. Avoid rate-limiting by waiting.\n\n::: {#58891970 .cell execution_count=10}\n``` {.python .cell-code}\nIdentifyLanguage(translate(test_str)).value\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n'Spanish'\n```\n:::\n:::\n\n\n::: {#09fb1307 .cell execution_count=11}\n``` {.python .cell-code code-fold=\"true\"}\nsleep(3) # <1>\n```\n:::\n\n\n1. Avoid rate-limiting by waiting.\n\n## Ibis\n\n[Ibis](https://ibis-project.org) is the portable Python dataframe library that enables Ibis Birdbrain to work on many data platforms.\n\nIbis makes calls to a data platform, providing an API but pushing the compute to (local or remote) query engines and storage. DuckDB is the default and we'll typically use it for demo puroses. You can work with an in-memory instance, but we'll often create a database file from example data:\n\n::: {#b7927f66 .cell execution_count=12}\n``` {.python .cell-code}\nimport ibis  # <1>\n\ncon = ibis.connect(\"duckdb://penguins.ddb\")  # <2>\nt = ibis.examples.penguins.fetch()  # <2>\nt = con.create_table(\"penguins\", t.to_pyarrow(), overwrite=True)  # <2>\n```\n:::\n\n\n1. Import the libraries we need.\n2. Setup the demo datain an Ibis backend.\n\nYou will typically connect to an existing data platform via your corresponding Ibis backend and have access to a number of tables:\n\n::: {#cb97573d .cell execution_count=13}\n``` {.python .cell-code}\nimport ibis  # <1>\n\nibis.options.interactive = True  # <2>\n\ncon = ibis.connect(\"duckdb://penguins.ddb\")  # <3>\nt = con.table(\"penguins\")  # <3>\n```\n:::\n\n\n1. Import Ibis.\n2. Configure Ibis (interactive).\n3. Connect to the data and load a table into a variable.\n\n### Backend\n\nA backend provides the connection and basic management of the data platform. Above, we created the `con` variable that is an instance of a DuckDB backend:\n\n::: {#f699fe63 .cell execution_count=14}\n``` {.python .cell-code}\ncon\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n<ibis.backends.duckdb.Backend at 0x130ee91d0>\n```\n:::\n:::\n\n\nIt usually contains some tables:\n\n::: {#e3f076a0 .cell execution_count=15}\n``` {.python .cell-code}\ncon.list_tables()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n['penguins']\n```\n:::\n:::\n\n\nWe can access some internals of Ibis to see what backends are available:\n\n::: {.callout-tip}\nDon't rely on accessing internals of Ibis in production.\n:::\n\n::: {#2a5968ad .cell execution_count=16}\n``` {.python .cell-code}\nbackends = [entrypoint.name for entrypoint in ibis.util.backend_entry_points()]\nbackends\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n['bigquery',\n 'clickhouse',\n 'dask',\n 'datafusion',\n 'druid',\n 'duckdb',\n 'flink',\n 'impala',\n 'mssql',\n 'mysql',\n 'oracle',\n 'pandas',\n 'polars',\n 'postgres',\n 'pyspark',\n 'snowflake',\n 'sqlite',\n 'trino']\n```\n:::\n:::\n\n\n### Table\n\nYou typically work with a table, conventionally named `t` for demo or exploratory purposes:\n\n::: {#ac22bdad .cell execution_count=17}\n``` {.python .cell-code}\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> island    </span>┃<span style=\"font-weight: bold\"> bill_length_mm </span>┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃<span style=\"font-weight: bold\"> flipper_length_mm </span>┃<span style=\"font-weight: bold\"> body_mass_g </span>┃<span style=\"font-weight: bold\"> sex    </span>┃<span style=\"font-weight: bold\"> year  </span>┃\n┡━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├─────────┼───────────┼────────────────┼───────────────┼───────────────────┼─────────────┼────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.7</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">181</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3750</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.5</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.4</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">186</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3800</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">40.3</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.0</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">195</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3250</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">nan</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">nan</span> │              <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │        <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>   │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">36.7</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">19.3</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">193</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3450</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.3</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">20.6</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">190</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3650</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">38.9</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.8</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">181</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3625</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.2</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">19.6</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">195</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4675</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">34.1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.1</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">193</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3475</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>   │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42.0</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">20.2</span> │               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">190</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4250</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>   │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>         │              <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │             <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │                 <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │           <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>      │     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │\n└─────────┴───────────┴────────────────┴───────────────┴───────────────────┴─────────────┴────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\nWhen working with many tables, you should name them descriptively.\n\n### Schema\n\nA table has a schema that Ibis maps to the data platform's data types:\n\n::: {#5f25c219 .cell execution_count=18}\n``` {.python .cell-code}\nt.schema()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nibis.Schema {\n  species            string\n  island             string\n  bill_length_mm     float64\n  bill_depth_mm      float64\n  flipper_length_mm  int64\n  body_mass_g        int64\n  sex                string\n  year               int64\n}\n```\n:::\n:::\n\n\n## LLMs and data: Marvin and Ibis\n\nYou can use Marvin and Ibis together to easily apply LLMs to data.\n\n::: {#39693de4 .cell execution_count=19}\n``` {.python .cell-code}\nfrom ibis.expr.schema import Schema\nfrom ibis.expr.types.relations import Table\n\n@marvin.ai_fn\ndef sql_select(\n    text: str, table_name: str = t.get_name(), schema: Schema = t.schema()\n) -> str:\n    \"\"\"writes the SQL SELECT statement to query the table according to the text\"\"\"\n\n\nquery = \"the unique combination of species and islands\"\nsql = sql_select(query).strip(\";\")\nsql\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n'SELECT DISTINCT species, island FROM penguins'\n```\n:::\n:::\n\n\n::: {#8c20804d .cell execution_count=20}\n``` {.python .cell-code}\nt.sql(sql)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species   </span>┃<span style=\"font-weight: bold\"> island    </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │\n├───────────┼───────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Chinstrap</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │\n└───────────┴───────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#f2d14380 .cell execution_count=21}\n``` {.python .cell-code code-fold=\"true\"}\nsleep(3) # <1>\n```\n:::\n\n\n1. Avoid rate-limiting by waiting.\n\n::: {#1f03bfea .cell execution_count=22}\n``` {.python .cell-code}\nt.sql(sql_select(query + \" and include their counts in from highest to lowest\").strip(\";\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species   </span>┃<span style=\"font-weight: bold\"> island    </span>┃<span style=\"font-weight: bold\"> count </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├───────────┼───────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">124</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Chinstrap</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">68</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">56</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">52</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">44</span> │\n└───────────┴───────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n## Next steps\n\nYou can get involved with [Ibis Birdbrain](https://github.com/ibis-project/ibis-birdbrain), our open-source data & AI project for building next-generation natural language interfaces to data.\n\n[Read the next post in this series](../llms-and-data-pt1).\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
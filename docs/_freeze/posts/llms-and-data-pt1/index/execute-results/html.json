{
  "hash": "7fce27898722b2ebbae8b205a13ec37b",
  "result": {
    "markdown": "---\ntitle: \"Three approaches\"\nauthor: \"Cody Peterson\"\ndate: \"2023-10-13\"\nexecute: \n  warning: false\ncategories:\n    - \"LLMs and data\"\n---\n\n## Introduction\n\nThe thought of using natural language to transform and analyze data is\nappealing. This post assumes familiarity with Marvin and Ibis -- [read the\nprevious post in the series for a quick overview](../llms-and-data-pt0).\n\n## Approaches\n\nWhen discussed at Voltron Data, we identified three distinct approaches to\napplying LLMs to data analytics that can be implemented today:\n\n1. LLM writes an analytic code\n2. LLM writes an analytic subroutine\n3. Use LLM in an analytic subroutine\n\nWhile these three approaches are not an exhaustive list of how LLMs can be\napplied to data, they can be easily understood and implemented with Ibis and\nMarvin in a few lines of code. Together with these two open-source tools, we can\nbuild a natural language interface for data analytics that supports 18+\nbackends.\n\nBut first, let's demonstrate the three approaches.\n\n### Approach 1: LLM writes analytic code\n\nState of the art (SoTA) LLMs are decent at generating SQL out of the box. We can\nbe clever to handle errors, retries, and more, but in its simplest form:\n\n::: {#0f74b507 .cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport ibis  # <1>\nimport marvin  # <1>\n\nfrom rich import print # <1>\nfrom time import sleep  # <1>\nfrom dotenv import load_dotenv  # <1>\n\nload_dotenv()  # <2>\n\ncon = ibis.connect(\"duckdb://penguins.ddb\")  # <3>\nt = ibis.examples.penguins.fetch()  # <3>\nt = con.create_table(\"penguins\", t.to_pyarrow(), overwrite=True)  # <3>\n```\n:::\n\n\n1. Import the libraries we need.\n2. Load the environment variable to setup Marvin to call our OpenAI account.\n3. Setup the demo datain an Ibis backend.\n\n::: {#ab13587b .cell execution_count=2}\n``` {.python .cell-code}\nimport ibis  # <1>\nimport marvin  # <1>\n\nfrom ibis.expr.schema import Schema  # <1>\nfrom ibis.expr.types.relations import Table  # <1>\n\n\nibis.options.interactive = True # <2>\nmarvin.settings.llm_model = \"openai/gpt-4\"  # <2>\n```\n:::\n\n\n1. Import Ibis and Marvin.\n2. Configure Ibis and Marvin\n\n::: {#52b31d4e .cell execution_count=3}\n``` {.python .cell-code}\n@marvin.ai_fn  # <1>\ndef _generate_sql_select(\n    text: str, table_name: str, table_schema: Schema\n) -> str:  # <1>\n    \"\"\"Generate SQL SELECT from text.\"\"\"  # <1>\n\n\ndef sql_from_text(text: str, t: Table) -> Table:  # <2>\n    \"\"\"Run SQL from text.\"\"\"  # <2>\n    return t.sql(_generate_sql_select(text, t.get_name(), t.schema()).strip(\";\"))  # <2>\n```\n:::\n\n\n1. A non-deterministic, LLM-powered AI function.\n2. A deterministic, human-authored function that calls the AI function.\n\n::: {#97498020 .cell execution_count=4}\n``` {.python .cell-code}\nt2 = sql_from_text(\"the unique combination of species and islands\", t)\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species   </span>┃<span style=\"font-weight: bold\"> island    </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │\n├───────────┼───────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Chinstrap</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │\n└───────────┴───────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#742cc41e .cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\"}\nsleep(3) # <1>\n```\n:::\n\n\n1. Avoid rate-limiting by waiting.\n\n::: {#01f39f85 .cell execution_count=6}\n``` {.python .cell-code}\nt3 = sql_from_text(\n    \"the unique combination of species and islands, with their counts, ordered from highest to lowest, and name that column just 'count'\",\n    t,\n)\nt3\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species   </span>┃<span style=\"font-weight: bold\"> island    </span>┃<span style=\"font-weight: bold\"> count </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├───────────┼───────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">124</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Chinstrap</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">68</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">56</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">52</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">44</span> │\n└───────────┴───────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#d6ed7efe .cell execution_count=7}\n``` {.python .cell-code code-fold=\"true\"}\nsleep(3) # <1>\n```\n:::\n\n\n1. Avoid rate-limiting by waiting.\n\nThis works well-enough for simple cases and can be expanded to handle complex\nones. In many scenarios, it may be easier to express a query in English or\nanother language than to write it in SQL, especially if working across multiple\nSQL dialects.\n\nSQL isn't standard, with many dialects across data platforms. Ibis works around\nthis by providing a standard Python API for analytic code but must make\ncompromises to support many data platforms, often via SQL in their native\ndialect. [Substrait](https://substrait.io) is a newer project that aims to solve\nthis problem by providing a standard, portable, and extensible intermediary\nrepresentation (IR) for data transformation code that Ibis and data platforms\ncould all standardize on. Substrait is still in the early stages of development,\nbut it's worth keeping an eye on and will be adopted in Ibis once supported\nacross many data platforms.\n\nFor now, we'll focus on generating SQL and Python analytical code with LLMs.\n\n### Approach 2: LLM writes an analytical subroutine\n\nIf more complex logic needs to be expressed, SoTA LLMs are also decent at\nwriting Python and a number of other programming languages that are used in\nanalytical subroutines. Many data platforms support user-defined functions\n(UDFs) in Python or some other language. We'll stick to scalar Python UDFs via\nDuckDB to demonstrate the concept:\n\n::: {#2ad7357f .cell execution_count=8}\n``` {.python .cell-code}\n@marvin.ai_fn  # <1>\ndef _generate_python_function(text: str) -> str:  # <1>\n    \"\"\"Generate a simple, typed, correct Python function from text.\"\"\"  # <1>\n\n\ndef create_udf_from_text(text: str) -> str:  # <2>\n    \"\"\"Create a UDF from text.\"\"\"  # <2>\n    return f\"\"\"\nimport ibis\n\n@ibis.udf.scalar.python\n{_generate_python_function(text)}\n\"\"\".strip()  # <2>\n```\n:::\n\n\n1. A non-deterministic, LLM-powered AI function.\n2. A deterministic, human-authored function that calls the AI function.\n\n::: {#600a8b1e .cell execution_count=9}\n``` {.python .cell-code}\nudf = create_udf_from_text(\n    \"a function named count_vowels that given an input string, returns an int w/ the number of vowels (y_included as a boolean option defaulted to False)\"\n)\nprint(udf)\nexec(udf)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">import ibis\n\n@ibis.udf.scalar.python\ndef <span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">count_vowels</span><span style=\"font-weight: bold\">(</span>input_string: str, y_included: bool = <span style=\"color: #ff0000; text-decoration-color: #ff0000; font-style: italic\">False</span><span style=\"font-weight: bold\">)</span> -&gt; int:\n    <span style=\"color: #008000; text-decoration-color: #008000\">\"\"\"Given an input string, it returns the number of vowels. y can be included as a vowel.\"\"\"</span>\n    vowels = <span style=\"color: #008000; text-decoration-color: #008000\">'aeiou'</span>\n    if y_included:\n        vowels += <span style=\"color: #008000; text-decoration-color: #008000\">'y'</span>\n    return <span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">sum</span><span style=\"font-weight: bold\">(</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> for char in input_string if char in vowels<span style=\"font-weight: bold\">)</span>\n</pre>\n```\n:::\n:::\n\n\n::: {#0190650b .cell execution_count=10}\n``` {.python .cell-code code-fold=\"true\"}\nsleep(3) # <1>\n```\n:::\n\n\n1. Avoid rate-limiting by waiting.\n\n::: {#db1f79e4 .cell execution_count=11}\n``` {.python .cell-code}\nt4 = t3.mutate(\n    species_vowel_count=count_vowels(t3.species),\n    island_vowel_count=count_vowels(t3.island),\n)\nt4\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species   </span>┃<span style=\"font-weight: bold\"> island    </span>┃<span style=\"font-weight: bold\"> count </span>┃<span style=\"font-weight: bold\"> species_vowel_count </span>┃<span style=\"font-weight: bold\"> island_vowel_count </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>               │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>              │\n├───────────┼───────────┼───────┼─────────────────────┼────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">124</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Chinstrap</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">68</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">56</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">52</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">44</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n└───────────┴───────────┴───────┴─────────────────────┴────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#a229f402 .cell execution_count=12}\n``` {.python .cell-code code-fold=\"true\"}\nsleep(3) # <1>\n```\n:::\n\n\n1. Avoid rate-limiting by waiting.\n\nIn this case, there's no reason not to have a human in the loop reviewing the\noutput code and committing it for production use. This could be useful for quick\nprototyping or, given a box of tools in the form of UDFs,\nworking through a natural language interface.\n\n### Approach 3: Use LLM in an analytical subroutine\n\nWe can also call the LLM once-per-row in the table via a subroutine. For\nvariety, we'll use an [AI model](https://www.askmarvin.ai/components/ai_model/)\ninstead of an [AI function](https://www.askmarvin.ai/components/ai_function/):\n\n::: {#2909462e .cell execution_count=13}\n``` {.python .cell-code}\nfrom pydantic import BaseModel, Field  # <1>\n\n# decrease cost\nmarvin.settings.llm_model = \"openai/gpt-3.5-turbo-16k\"  # <2>\n\n\n@marvin.ai_model  # <3>\nclass VowelCounter(BaseModel):  # <3>\n    \"\"\"Count vowels in a string.\"\"\"  # <3>\n\n    include_y: bool = Field(False, description=\"Include 'y' as a vowel.\")  # <3>\n    # num_a: int = Field(..., description=\"The number of 'a' vowels.\") # <3>\n    # num_e: int = Field(..., description=\"The number of 'e' vowels.\") # <3>\n    # num_i: int = Field(..., description=\"The number of 'i' vowels.\") # <3>\n    # num_o: int = Field(..., description=\"The number of 'o' vowels.\") # <3>\n    # num_u: int = Field(..., description=\"The number of 'u' vowels.\") # <3>\n    # num_y: int = Field(..., description=\"The number of 'y' vowels.\") # <3>\n    num_total: int = Field(..., description=\"The total number of vowels.\")  # <3>\n\n\nVowelCounter(\"hello world\")  # <4>\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\nVowelCounter(include_y=False, num_total=3)\n```\n:::\n:::\n\n\n1. Additional imports for Pydantic.\n2. Configure Marvin to use a cheaper model.\n3. A non-deterministic, LLM-powered AI model.\n4. Call the AI model on some text.\n\nThen we'll have the LLM write the UDF that calls the LLM, just to be fancy:\n\n::: {#7261ca98 .cell execution_count=14}\n``` {.python .cell-code}\nudf = create_udf_from_text(\n    \"a function named count_vowels_ai that given an input string, calls VowelCounter on it and returns the num_total attribute of that result\"\n)\nprint(udf)\nexec(udf)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">import ibis\n\n@ibis.udf.scalar.python\ndef <span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">count_vowels_ai</span><span style=\"font-weight: bold\">(</span>input_string: str<span style=\"font-weight: bold\">)</span> -&gt; int:\n    result = <span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">VowelCounter</span><span style=\"font-weight: bold\">(</span>input_string<span style=\"font-weight: bold\">)</span>\n    return result.num_total\n</pre>\n```\n:::\n:::\n\n\n::: {#8f30fb74 .cell execution_count=15}\n``` {.python .cell-code code-fold=\"true\"}\nsleep(3) # <1>\n```\n:::\n\n\n1. Avoid rate-limiting by waiting.\n\n::: {#faa9c777 .cell execution_count=16}\n``` {.python .cell-code}\nt5 = t3.mutate(\n    species_vowel_count=count_vowels_ai(t3.species),\n    island_vowel_count=count_vowels_ai(t3.island),\n)\nt5\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species   </span>┃<span style=\"font-weight: bold\"> island    </span>┃<span style=\"font-weight: bold\"> count </span>┃<span style=\"font-weight: bold\"> species_vowel_count </span>┃<span style=\"font-weight: bold\"> island_vowel_count </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>               │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>              │\n├───────────┼───────────┼───────┼─────────────────────┼────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">124</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Chinstrap</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">68</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">56</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">52</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">44</span> │                   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n└───────────┴───────────┴───────┴─────────────────────┴────────────────────┘\n</pre>\n```\n:::\n:::\n\n\nNotice that in this UDF, unlike in the previous example, a LLM is being called\n(possibly several times) for each row in the table. This is a very expensive\noperation and we'll need to be careful about how we use it in practice.\n\n::: {#c40711f7 .cell execution_count=17}\n``` {.python .cell-code code-fold=\"true\"}\nsleep(3) # <1>\n```\n:::\n\n\n1. Avoid rate-limiting by waiting.\n\n## Summary\n\nTo summarize this post:\n\n::: {#3d6313ea .cell execution_count=18}\n``` {.python .cell-code}\nfrom rich import print\n\nwith open(\"index.qmd\", \"r\") as f:\n    self_text = f.read()\n\n# increease accuracy\nmarvin.settings.llm_model = \"openai/gpt-4\"\n\n@marvin.ai_model\nclass Summary(BaseModel):\n    \"\"\"Summary of text.\"\"\"\n\n    summary_line: str = Field(..., description=\"The one-line summary of the text.\")\n    summary_paragraph: str = Field(\n        ..., description=\"The one-paragraph summary of the text.\"\n    )\n    conclusion: str = Field(\n        ..., description=\"The conclusion the reader should draw from the text.\"\n    )\n    key_points: list[str] = Field(..., description=\"The key points of the text.\")\n    critiques: list[str] = Field(\n        ..., description=\"Professional, fair critiques of the text.\"\n    )\n    suggested_improvements: list[str] = Field(\n        ..., description=\"Suggested improvements for the text.\"\n    )\n    sentiment: float = Field(..., description=\"The sentiment of the text.\")\n    sentiment_label: str = Field(..., description=\"The sentiment label of the text.\")\n    author_bias: str = Field(..., description=\"The author bias of the text.\")\n\n\nprint(Summary(self_text))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">Summary</span><span style=\"font-weight: bold\">(</span>\n    <span style=\"color: #808000; text-decoration-color: #808000\">summary_line</span>=<span style=\"color: #008000; text-decoration-color: #008000\">\"The blog post titled 'Three approaches' by Cody Peterson, dated 2023-10-13, discusses three </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">distinct approaches to applying Language Learning Models (LLMs) to data analytics using open-source tools Ibis and </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">Marvin.\"</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">summary_paragraph</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'The author explains three approaches to applying LLMs to data analytics. The first approach </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">is letting the LLM write an analytic code, specifically generating SQL. The second approach involves letting LLM </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">write an analytic subroutine, demonstrated by writing Python code for user-defined functions. The third approach </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">uses LLM in an analytic subroutine, illustrated by calling the LLM once-per-row in a table via a subroutine. Each </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">method has potential applications and limitations, and the choice of approach will depend on the specific </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">requirements of the data analytics task.'</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">conclusion</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'LLMs can be used to transform and analyze data in various ways. By using these approaches in </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">combination with open-source tools like Ibis and Marvin, it is possible to build a natural language interface for </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">data analytics that supports multiple backends. The author concludes by introducing an open-source data &amp; AI </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">project for building next-generation natural language interfaces to data, Ibis Birdbrain.'</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">key_points</span>=<span style=\"font-weight: bold\">[</span>\n        <span style=\"color: #008000; text-decoration-color: #008000\">'The LLM can write an analytic code, particularly generating SQL.'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'The LLM can also write an analytic subroutine, exemplified by writing Python code for user-defined </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">functions.'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'The LLM can be used in an analytic subroutine, shown by calling the LLM once-per-row in a table via a </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">subroutine.'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'The author suggests that each approach has its potential applications and limitations.'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'The choice of approach will depend on the specific requirements of the data analytics task.'</span>\n    <span style=\"font-weight: bold\">]</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">critiques</span>=<span style=\"font-weight: bold\">[</span>\n        <span style=\"color: #008000; text-decoration-color: #008000\">'The author could have provided more concrete examples or case studies to illustrate the application of </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">these approaches.'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'A comparison of the advantages and disadvantages of each approach would have been helpful.'</span>\n    <span style=\"font-weight: bold\">]</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">suggested_improvements</span>=<span style=\"font-weight: bold\">[</span>\n        <span style=\"color: #008000; text-decoration-color: #008000\">'The author could include real-world applications or examples of each approach.'</span>,\n        <span style=\"color: #008000; text-decoration-color: #008000\">'A detailed comparison of the pros and cons of each approach would provide better guidance for readers.'</span>\n    <span style=\"font-weight: bold\">]</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">sentiment</span>=<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.25</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">sentiment_label</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'Neutral'</span>,\n    <span style=\"color: #808000; text-decoration-color: #808000\">author_bias</span>=<span style=\"color: #008000; text-decoration-color: #008000\">'The author shows a positive bias towards the use of open-source tools, Ibis and Marvin, for data </span>\n<span style=\"color: #008000; text-decoration-color: #008000\">analytics.'</span>\n<span style=\"font-weight: bold\">)</span>\n</pre>\n```\n:::\n:::\n\n\n## Next steps\n\nYou can get involved with [Ibis\nBirdbrain](https://github.com/ibis-project/ibis-birdbrain), our open-source data\n& AI project for building next-generation natural language interfaces to data.\n\n[Read the next post in this series](../llms-and-data-pt2).\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
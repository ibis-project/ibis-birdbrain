{
  "hash": "d58aef84abe91176621bc06047c25c39",
  "result": {
    "markdown": "---\ntitle: \"Computations and control flow: it's just programming\"\nauthor: \"Cody Peterson\"\ndate: \"2023-10-14\"\ncategories:\n    - \"LLMs and data\"\n---\n\n## Introduction\n\nThe recent Generative AI hype cycle has led to a lot of new terminology to\nunderstand. In this post, we'll cover some key concepts from the groud up and\nexplain the basics of working with LLMs in the context of data.\n\nThis post assumes [basic familiarity with Marvin and Ibis](../llms-and-data-pt0)\nand [three approaches to applying LLMs to data](../llms-and-data-pt1).\n\n::: {#675d651b .cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport ibis  # <1>\nimport marvin  # <1>\n\nfrom dotenv import load_dotenv  # <1>\n\nload_dotenv()  # <2>\n\ncon = ibis.connect(\"duckdb://penguins.ddb\")  # <3>\nt = ibis.examples.penguins.fetch()  # <3>\nt = con.create_table(\"penguins\", t.to_pyarrow(), overwrite=True)  # <3>\n```\n:::\n\n\n1. Import the libraries we need.\n2. Load the environment variable to setup Marvin to call our OpenAI account.\n3. Setup the demo datain an Ibis backend.\n\nFirst, we'll setup Ibis and Marvin with some simple example data:\n\n::: {#297c21b2 .cell execution_count=2}\n``` {.python .cell-code}\nimport ibis  # <1>\nimport marvin  # <1>\n\nfrom ibis.expr.schema import Schema  # <1>\nfrom ibis.expr.types.relations import Table  # <1>\n\nibis.options.interactive = True  # <2>\nmarvin.settings.llm_model = \"openai/gpt-4\"  # <2>\n\ncon = ibis.connect(\"duckdb://penguins.ddb\")  # <3>\nt = con.table(\"penguins\")  # <3>\n```\n:::\n\n\n1. Import Ibis and Marvin.\n2. Configure Ibis (interactive) and Marvin (GPT-4).\n3. Connect to the data and load a table into a variable.\n\n## Context\n\nContext is a fancy way of talking about the input to a LLM.\n\n## Calls\n\nWe make calls with inputs to functions or systems and get outputs. We can think\nof calling the LLM with our input (context) and getting an output (text).\n\n## Computations\n\nA function or system often computes something. We can be pedantic about calls\nversus computations, but in general the connotation around computations is more\ntime and resource intensive than a call. At the end of the day, they will both\ntake some computer cycles.\n\n## Retrieval augmented generation (RAG)\n\nInstead of you typing out context for the bot, we can **retrieve** context from\nsomewhere, **augment** our strings sent to the bot with this context, and then\n**generate** a response from the bot.\n\nAs a contrived example, instead of saying \"The capitol of foo is bar\", we can\nretrieve the capitol of foo from a database, augment it with our context, and\nthen generate a response from the bot. You may notice that [we already did this\nin the firt post in the series -- let's review that code\nagain](../llms-and-data-pt0):\n\n::: {#1e60f7bd .cell execution_count=3}\n``` {.python .cell-code}\nfrom ibis.expr.schema import Schema\nfrom ibis.expr.types.relations import Table\n\n\n@marvin.ai_fn\ndef sql_select(\n    text: str, table_name: str = t.get_name(), schema: Schema = t.schema()\n) -> str:\n    \"\"\"writes the SQL SELECT statement to query the table according to the text\"\"\"\n\n\nquery = \"the unique combination of species and islands\"\nsql = sql_select(query).strip(\";\")\nsql\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'SELECT DISTINCT species, island FROM penguins'\n```\n:::\n:::\n\n\nNotice that we **retrieved** the table name and schema with calls to the Ibis\ntable (`t.get_name()` and `t.schema()`). We then **augment** our context (the\nquery in natural language) with this information and **generate** a response\nfrom the bot.\n\nThis works reasonably well for simple SQL queries:\n\n::: {#07c59dc8 .cell execution_count=4}\n``` {.python .cell-code}\nt.sql(sql)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species   </span>┃<span style=\"font-weight: bold\"> island    </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │\n├───────────┼───────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo   </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Chinstrap</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │\n└───────────┴───────────┘\n</pre>\n```\n:::\n:::\n\n\nI would argue in this case there wasn't any real **computation** done by our\n**calls** to the Ibis table -- we were just retrieving some relatively static\nmetadata -- but we could have done some more complex computations (on any of 18+\ndata platforms).\n\n## Thought leadership\n\nTODO: human rewrite\n\nIn the realm of Generative AI, particularly when working with Language Learning\nModels (LLMs), understanding the concept of 'context' is crucial. Context, in this\ndomain, refers to the inputs that are fed into an LLM, and the corresponding\noutputs they generate. This post breaks down the complexities of this process into\nunderstandable fragments, including retrieval of context, its augmentation, and,\nthereafter, the generation of a response.\n\nAn illustrative example is provided, showcasing a database interaction. It\ndemonstrates how the data retrieved can be used to augment the context before the\nbot generates a response. This valuable insight underlines the practical\napplication of the theory, reinforcing the understanding of the readers.\n\nWe also venture into the difference between simple static metadata retrieval and\nthe more intricate computations. This distinction echoes the breadth and depth of\nthe processes involved in Generative AI.\n\nAs we continue to explore and unravel the potential of Generative AI and LLMs,\nthis post serves as a fundamental building block. It creates a pathway for\nenthusiasts and professionals alike to delve deeper into this exciting field. By\nbreaking down complex concepts into comprehensible segments, it fosters an\nenvironment of learning and growth.\n\nThis marks just the beginning of our journey into the world of Generative AI. As\nwe dig deeper, we will continue to explore, learn and share with our readers. Stay\ntuned for more insightful content in this series. [1]\n\n[1] https://github.com/ibis-project/ibis-birdbrain\n\n## Next steps\n\nYou can get involved with [Ibis\nBirdbrain](https://github.com/ibis-project/ibis-birdbrain), our open-source data\n& AI project for building next-generation natural language interfaces to data.\n\n[Read the next post in this series](../llms-and-data-pt3).\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
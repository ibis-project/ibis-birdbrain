---
title: "Calls and computations"
author: "Cody Peterson"
date: "2023-10-14"
categories:
    - "LLMs and data"
---

## Introduction

The Generative AI hype cycle has led to a new wave of terminology to understand. In this post, we'll use basic programming language to explain and explore 
the concepts of "chains" of LLMs and retrieval-augmented generation (RAG) approaches to working with data.

This post assumes [basic familiarity with Marvin and Ibis](../llms-and-data-pt0) and [the three approaches to applying LLMs to data](../llms-and-data-pt1).

```{python}
# | code-fold: true
import ibis  # <1>
import marvin  # <1>

from dotenv import load_dotenv  # <1>

load_dotenv()  # <2>

con = ibis.connect("duckdb://penguins.ddb")  # <3>
t = ibis.examples.penguins.fetch()  # <3>
t = con.create_table("penguins", t.to_pyarrow(), overwrite=True)  # <3>
```

1. Import the libraries we need.
2. Load the environment variable to setup Marvin to call our OpenAI account.
3. Setup the demo datain an Ibis backend.


```{python}
import ibis  # <1>
import marvin  # <1>

from ibis.expr.schema import Schema  # <1>
from ibis.expr.types.relations import Table  # <1>

ibis.options.interactive = True  # <2>
marvin.settings.llm_model = "openai/gpt-4"  # <2>

con = ibis.connect("duckdb://penguins.ddb")  # <3>
t = con.table("penguins")  # <3>
```

1. Import Ibis and Marvin.
2. Configure Ibis (interactive) and Marvin (GPT-4).
3. Connect to the data and load a table into a variable.

## Calls and computations

When an AI platform's large language model API is called, it returns text as the result of some computation on input text. See the [LLM concept article](/concepts/llms.qmd) for details.

### Calls

A call is just that -- a call to **something**. In Python, this is typically always something else in Python, that itself may make calls to other programming languages or external services.

```{python}
@marvin.ai_fn  # <1>
def _generate_sql_select(
    text: str, table_name: str, table_schema: Schema
) -> str:  # <1>
    """Generate SQL SELECT from text."""  # <1>


def sql_from_text(text: str, t: Table) -> Table:  # <2>
    """Run SQL from text."""  # <2>
    return t.sql(_generate_sql_select(text, t.get_name(), t.schema()).strip(";"))  # <2>
```

1. A non-deterministic, LLM-powered AI function.
2. A deterministic, human-authored function that calls the AI function.



### Computations

A computation is just that -- a computation of **something**. In general, a computation is represented by a system that takes an input and returns an output.

## Comparison to MLOps and DevOps

## Summary

## Next steps

You can get involved with [Ibis
Birdbrain](https://github.com/ibis-project/ibis-birdbrain), our open-source data
& AI project for building next-generation natural language interfaces to data.

[Read the next post in this series](../llms-and-data-pt3).

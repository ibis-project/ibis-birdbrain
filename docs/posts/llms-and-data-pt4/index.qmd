---
title: "Auxiliary tools"
author: "Cody Peterson"
date: "2023-10-16"
categories:
    - "LLMs and data"
---

## Introduction

As a product manager, I don't spend most of my time managing products. I suspect most data developers (analysts, engineers, scientists, etc.) don't spend most of their time writing data code. There are many auxiliary tasks that are required in doing many technical jobs. These include:

- searching the Internet for information
- reading, summarizing, and synthesizing information
- performing boring computer tasks
- translating between different languages (e.g. SQL and Python; English and Spanish)
- copying and modifying existing code
- querying some basic informatin from data platforms

What if we could, through natural language, have a bot perform many of these tasks (in addition to basic data analysis) on our behalf?

## We're using Python, let's use Python

We're already using Python for Ibis and Marvin. Let's use it for auxillary tools. We'll setup our data and AI platform connections and some simple example data to work with.

```{python}
# | code-fold: true
import ibis  # <1>
import marvin  # <1>

from dotenv import load_dotenv  # <1>

load_dotenv()  # <2>

con = ibis.connect("duckdb://penguins.ddb")  # <3>
t = ibis.examples.penguins.fetch()  # <3>
t = con.create_table("penguins", t.to_pyarrow(), overwrite=True)  # <3>
```

1. Import the libraries we need.
2. Load the environment variable to setup Marvin to call our OpenAI account.
3. Setup the demo datain an Ibis backend.

```{python}
import ibis  # <1>
import marvin  # <1>

from ibis.expr.schema import Schema  # <1>
from ibis.expr.types.relations import Table  # <1>

ibis.options.interactive = True  # <2>
marvin.settings.llm_model = "openai/gpt-4"  # <2>

con = ibis.connect("duckdb://penguins.ddb")  # <3>
t = con.table("penguins")  # <3>
```

1. Import Ibis and Marvin.
2. Configure Ibis (interactive) and Marvin (GPT-4).
3. Connect to the data and load a table into a variable.

## Filesystem tools

## Internet tools

## AI-powered tools

## Introducing Ibis Birdbrain

Introduce the bot. Need to overview the tools here I think, but should probably skip most details.

## A comparison with MLOps

TODO: point on how most of the work is not ML

Before "MLOps" was a standard term, the [Sculley et al paper](https://proceedings.neurips.cc/paper_files/paper/2015/file/86df7dcfd896fcaf2674f757a2463eba-Paper.pdf) from 2015 described the key issues with building real-world ML systems.

![Figure 1: Only a small fraction of real-world ML systems is composed of the ML code, as shown by the small black box in the middle. The required surround infrastructure is vast and complex.](images/figure1.png)

You can substitute "LLM" for "ML" in the above figure.

### The "toy problem" problem

ML and LLMs are cool! They're fun to play with and it's easy to get distracted with fun applications. Often, ML is learned through solving toy problems, and ...

### The application landscape is vast

...and thus requires modular, interoperable, customizable, and extensible tools. TODO: more comparison to MLOps.

## Next steps

You can get involved with [Ibis
Birdbrain](https://github.com/ibis-project/ibis-birdbrain), our open-source data
& AI project for building next-generation natural language interfaces to data.
